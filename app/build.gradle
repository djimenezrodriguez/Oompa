plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-parcelize'
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.napptilus.oompaloompa"
        minSdk 23
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        dataBinding true
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.2'
    // Fragment
    implementation "androidx.fragment:fragment-ktx:1.5.2"
    // Activity
    implementation "androidx.activity:activity-ktx:1.5.1"
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"
    // LiveData
    /*Esta libreria es muy utilizada en mvvm y en mi caso me permite poder crear mutablesdata, que al setearle
    * un valor, se ejecutara mi observable, y por tanto, es util porque tengo un control de las acciones que deben ocurrir en el
    * momento en que una variable sea actualizada*/
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.5.1"
    // Hilt
    /*Con esta libreria de inyeccion de dependencias, pude inyectar en dagger diferentes componentes de utilidad generales en al app,
    * asi como el cliente de retrofit, okhttp o la propia api de la app, en este caso, workersApi*/
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
    //Corrutinas
    /*Utilizare corutinas para acelerar el rendimiento de la app pudiendo realizar llamadas en paralelo(en este caso,
    no seria necesario, debido a que la app no tiene gran carga de trabajo, pero es recomendable siempre utilizarlas
    por una cuestion de rendimiento)*/
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1'
    //gif splash
    /*Se trata de una librería que nos permite setear un gif en nuestro xml,
    * en este caso, yo lo utilice para mi splash*/
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.10'
    //glide
    /*Con esta libreria, descargaremos las imagenes y las setearemos directamente en el imageview*/
    implementation 'com.github.bumptech.glide:glide:4.13.2'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.13.2'
    //Room
    /*Utilizaremos room para guardar la información de los diferentes trabajadores en el caso de
    * que nos quedemos sin conexion*/
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // Moshi
    /*Este sera nuestro parseador de json en retrofit*/
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"
    implementation "com.squareup.moshi:moshi:$moshi_version"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    implementation "com.squareup.moshi:moshi-adapters:$moshi_version"
    //gson
    /*Este sera nuestro parseador de json*/
    implementation "com.google.code.gson:gson:$gson_version"

    //retrofit
    /*Usaremos la libreria de retrofit para poder realizar la conexión con el servidor, le indicaremos la
    * url base en la cual se aloja nuestro backend, y en el repositorio, indicaremos exactamente a que parte
    * del backend queremos acceder*/
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'
    implementation 'com.squareup.retrofit2:converter-moshi:2.9.0'

    //jsoup
    /*Library to remove tags from html*/
    implementation "org.jsoup:jsoup:$jsoup_version"

    //OKHTTP
    /*Libreria utilizada para crer nuestro cliente que posteriormente setearemos en retrofit, con los interceptors que consideremos
    * necesarios*/
    implementation(platform("com.squareup.okhttp3:okhttp-bom:4.9.0"))
    implementation("com.squareup.okhttp3:okhttp")
    implementation("com.squareup.okhttp3:logging-interceptor")

    //navigation
    /*He añadido la libreria de navigation para poder navegar entre las diferentes pantallas de manera
    * mas fluida, simplemente añadiendo las diferentes pantallas en el xml que crearemos posteriormente en la carpeta
    * navigation y añadiendo los enlaces a las siguientes pantallas, a continuación, haremos referencia a estos enlaces
    * desde el viewmodel e iremos a la pantalla que tengamos seteada en el xml*/
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"


}